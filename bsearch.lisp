(defpackage #:bsearch
  (:use #:common-lisp)
  (:export
    #:bsearch
    ))
(in-package #:bsearch)

(defun bsearch(item vector &key(key #'identity)(test #'eql)(start 0)(end (length vector))(compare #'<)(default nil))
  (assert(<= 0 start end (length vector)))
  (labels((ON-THE-NODE(center %)
	    (if(zerop center)
	      (REACHED-LEAF % (+ center start))
	      (CHECK-CONTENTS(+ center start))))
	  (REACHED-LEAF(% index)
	    (let((i(if(zerop %) ; (= end start)
		     (1+ index)
		     index)))
	      (DETERMINE-RETURN-VALUE i (svref vector i))))
	  (DETERMINE-RETURN-VALUE(index target)
	    (if(funcall test item(funcall key target))
	      (values target index)
	      (values default nil)))
	  (CHECK-CONTENTS(index)
	    (let*((target(svref vector index))
		  (elt(funcall key target)))
	      (if(funcall test item elt)
		(values target index)
		(REC elt index))))
	  (REC(elt index)
	    (if(funcall compare item elt)
	      (setf end index)
	      (setf start index))
	    (multiple-value-call #'ON-THE-NODE (floor (- end start)2)))
	  )
    (declare(inline REACHED-LEAF DETERMINE-RETURN-VALUE CHECK-CONTENTS REC))
    (multiple-value-call #'ON-THE-NODE (floor (- end start) 2))))
